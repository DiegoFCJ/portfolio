name: Deploy to GitHub Pages

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SITE_BASE_URL: https://diegofois.github.io/portfolio

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm install

      - name: Configure production environment
        run: |
          set -euo pipefail
          GA_TRACKING_ID="${{ secrets.GA_TRACKING_ID }}"
          FORMSPREE_ENDPOINT="${{ secrets.FORMSPREE_ENDPOINT }}"
          SENTRY_DSN="${{ secrets.SENTRY_DSN }}"

          ENABLE_ANALYTICS="false"
          if [ -n "${GA_TRACKING_ID}" ]; then
            ENABLE_ANALYTICS="true"
          fi

          ENABLE_ERROR_TRACKING="false"
          if [ -n "${SENTRY_DSN}" ]; then
            ENABLE_ERROR_TRACKING="true"
          fi

          cat <<EOF > src/environments/environment.prod.ts
import { EnvironmentConfig } from './environment.config';

export const environment: EnvironmentConfig = {
  production: true,
  gaTrackingId: '${GA_TRACKING_ID}',
  formspreeEndpoint: '${FORMSPREE_ENDPOINT}',
  enableAnalytics: ${ENABLE_ANALYTICS},
  enableErrorTracking: ${ENABLE_ERROR_TRACKING},
  sentryDsn: '${SENTRY_DSN}',
  sentryTracesSampleRate: 1.0,
};

export type { EnvironmentConfig } from './environment.config';
EOF

      - name: Build Project
        run: npm run build -- --output-path=dist/portfolio --base-href="/portfolio/"

      - name: Verify Build Output
        run: ls dist/portfolio/browser

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          folder: dist/portfolio/browser
          force: true
          clean: true

      - name: Extract changelog entry
        id: changelog
        env:
          TAG: ${{ github.ref_name }}
        run: |
          set -euo pipefail
          python - <<'PY'
import os
import re

tag = os.environ['TAG']
version = tag.lstrip('v')
with open('CHANGELOG.md', 'r', encoding='utf-8') as fh:
    changelog = fh.read()

pattern = re.compile(rf"^## \[{re.escape(version)}\].*?(?=^## \[|\Z)", re.MULTILINE | re.DOTALL)
match = pattern.search(changelog)
if not match:
    raise SystemExit(f"No changelog entry found for version {version}")

entry = match.group().strip()

with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as out:
    out.write('content<<EOF\n')
    out.write(entry)
    out.write('\nEOF\n')
PY

      - name: Publish release notes
        uses: actions/github-script@v7
        env:
          TAG: ${{ github.ref_name }}
          CHANGELOG_ENTRY: ${{ steps.changelog.outputs.content }}
        with:
          script: |
            const tag = process.env.TAG;
            const body = process.env.CHANGELOG_ENTRY;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            async function upsertRelease() {
              try {
                const existing = await github.rest.repos.getReleaseByTag({
                  owner,
                  repo,
                  tag
                });

                await github.rest.repos.updateRelease({
                  owner,
                  repo,
                  release_id: existing.data.id,
                  body,
                  name: tag
                });
              } catch (error) {
                if (error.status === 404) {
                  await github.rest.repos.createRelease({
                    owner,
                    repo,
                    tag_name: tag,
                    name: tag,
                    body,
                    draft: false,
                    prerelease: false
                  });
                } else {
                  throw error;
                }
              }
            }

            await upsertRelease();
