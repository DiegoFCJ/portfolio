name: Build and preview portfolio

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: pages-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure GitHub Pages
        uses: actions/configure-pages@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build -- --base-href ${{ env.BASE_HREF }}
        env:
          BASE_HREF: ${{ github.event_name == 'push' && '/portfolio/' || './' }}
          NG_CLI_ANALYTICS: "false"

      - name: Add SPA fallback page
        run: |
          cp dist/portfolio/browser/index.html dist/portfolio/browser/404.html

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist/portfolio/browser

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository
    environment:
      name: ${{ github.event_name == 'push' && 'github-pages' || format('preview/pr-{0}', github.event.number) }}
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Share preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          PREVIEW_URL: ${{ steps.deployment.outputs.page_url }}
        with:
          script: |
            const marker = '<!-- preview-url -->';
            const body = `${marker}\nðŸš€ Preview disponibile: ${process.env.PREVIEW_URL}`;
            const prNumber = context.payload.pull_request.number;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const existing = comments.find(comment => comment.user.type === 'Bot' && comment.body.includes(marker));

            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body,
              });
            }
